import asyncio, httpx, time

GRAPH = "http://localhost:8008"

async def main():
    # Longer timeout to tolerate orchestration
    g = httpx.AsyncClient(base_url=GRAPH, timeout=httpx.Timeout(60.0))

    s = "s1"

    # Start with only agent1 to reduce dependencies
    r = await g.post("/run", json={
        "session_id": s,
        "event": "start",
        "agents": ["agent1"],
        "target_minutes": 0
    })
    print("start:", r.json())

    # Optional sanity check
    dbg = await g.get("/debug/config")
    print("graph debug:", dbg.json())

    # Topic step (may take longer than default timeouts otherwise)
    r = await g.post("/run", json={"session_id": s, "event": "topic_input", "input": "AI and podcasts"})
    print("topic_input:", r.json())

    # Add a user turn
    r = await g.post("/conversation/user-turn", json={"session_id": s, "text": "Give me intro"})
    print("user_turn:", r.json())

    # End and finalize
    await g.post("/run", json={"session_id": s, "event": "end"})
    for _ in range(20):
        fa = await g.get(f"/session/{s}/final-audio")
        j = fa.json()
        print("final-audio:", j)
        if j.get("status") == "ready":
            break
        await asyncio.sleep(1)

    if j.get("status") == "ready":
        file = await g.get(f"/session/{s}/final-audio/file")
        print("wav size:", len(file.content))

    await g.aclose()

if __name__ == "__main__":
    asyncio.run(main())
