SYSTEM_NEXUS_TOPIC = (
    "You are Agent Nexus, the host of Optum MultiAgent Conversation. "
    "Your role is to introduce the key metrics and topics that Agents Reco and Stat will discuss. "
    "Review the provided data context and highlight 2-3 most interesting or important metrics trends. "
    "Keep it concise (2-3 sentences), professional, and engaging. "
    "Focus on the most significant patterns that would spark an interesting discussion between metrics experts. "
    "Mention specific metrics like ASA, call duration, processing time, or volume changes when relevant. "
    "Set the stage for a productive conversation between our recommendation specialist and data integrity expert."
)
async def generate_nexus_topic_intro(context: str) -> str:
    """Generate Nexus's introduction of the metrics and topics for discussion"""
    topic_system = SYSTEM_NEXUS_TOPIC
    
    topic_user = f"""
    Data Context: {context}
    
    Based on this data, identify the 2-3 most interesting metric trends or patterns that would make for 
    a compelling discussion between a metrics recommendation specialist (Reco) and a data integrity expert (Stat).
    Provide a brief introduction that sets the stage for their conversation.
    """
    
    return await llm(topic_system, topic_user, max_tokens=120, temperature=0.4)
async def run_podcast():
    print("Starting Optum MultiAgent Conversation Podcast Generator (no music)â€¦")
    choice = ask_files()
    context, meta = load_context(choice)
    turns, target_seconds = ask_turns_and_duration()
    
    # Generate conversation
    segments = []
    script_lines = []
    last_openings = {}
    conversation_history = []
    last_speaker = ""
    
    # Fixed introductions
    script_lines.append("Agent Nexus:" + NEXUS_INTRO)
    ssml = text_to_ssml(NEXUS_INTRO, "NEXUS")
    segments.append(synth(ssml))
    
    script_lines.append("Agent Reco:" + RECO_INTRO)
    ssml = text_to_ssml(RECO_INTRO, "RECO")
    segments.append(synth(ssml))
    
    script_lines.append("Agent Stat:" + STAT_INTRO)
    ssml = text_to_ssml(STAT_INTRO, "STAT")
    segments.append(synth(ssml))
    
    # Agent Nexus introduces the topics and metrics
    print("Generating Nexus topic introduction...")
    nexus_topic_intro = await generate_nexus_topic_intro(context)
    script_lines.append("Agent Nexus:" + nexus_topic_intro)
    ssml = text_to_ssml(nexus_topic_intro, "NEXUS")
    segments.append(synth(ssml))
    
    # Add the topic introduction to conversation history
    conversation_history.append(f"Nexus: {nexus_topic_intro}")
    
    # Generate dynamic conversation between Reco and Stat
    for i in range(turns):
        print(f"Generating turn {i+1}/{turns}...")
        
        # Agent Reco's turn
        reco_prompt = f"Context: {context}\n\nNexus just introduced these topics: {nexus_topic_intro}\n\nPrevious conversation: {conversation_history[-2:] if len(conversation_history) > 1 else 'None'}\n\nProvide your recommendation based on the data and topics introduced."
        reco_response = await llm(SYSTEM_RECO, reco_prompt)
        reco_response = vary_opening(reco_response, "RECO", last_openings)
        reco_response = _add_conversation_dynamics(reco_response, "RECO", last_speaker, context, i, conversation_history)
        reco_response = _add_emotional_reactions(reco_response, "RECO")
        reco_response = _clean_repetition(reco_response)
        reco_response = ensure_complete_response(reco_response)
        
        script_lines.append("Agent Reco:" + reco_response)
        ssml = text_to_ssml(reco_response, "RECO")
        segments.append(synth(ssml))
        conversation_history.append(f"Reco: {reco_response}")
        last_speaker = "Reco"
        
        # Brief pause between speakers
        time.sleep(0.2)
        
        # Agent Stat's turn
        stat_prompt = f"Context: {context}\n\nNexus introduced these topics: {nexus_topic_intro}\n\nReco just said: {reco_response}\n\nPrevious conversation: {conversation_history[-3:] if len(conversation_history) >= 3 else 'None'}\n\nRespond to Reco's point focusing on data integrity aspects."
        stat_response = await llm(SYSTEM_STAT, stat_prompt)
        stat_response = vary_opening(stat_response, "STAT", last_openings)
        stat_response = _add_conversation_dynamics(stat_response, "STAT", last_speaker, context, i, conversation_history)
        stat_response = _add_emotional_reactions(stat_response, "STAT")
        stat_response = _clean_repetition(stat_response)
        stat_response = ensure_complete_response(stat_response)
        
        script_lines.append("Agent Stat:" + stat_response)
        ssml = text_to_ssml(stat_response, "STAT")
        segments.append(synth(ssml))
        conversation_history.append(f"Stat: {stat_response}")
        last_speaker = "Stat"
        
        # Brief pause between exchanges
        time.sleep(0.3)
    
    # Use the custom closing script
    script_lines.append("Agent Nexus:" + NEXUS_OUTRO)
    ssml = text_to_ssml(NEXUS_OUTRO, "NEXUS")
    segments.append(synth(ssml))
    
    # Write final output
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"podcast_{timestamp}.wav"
    write_master(segments, output_file)
    
    # Write script to file
    script_file = f"podcast_script_{timestamp}.txt"
    with open(script_file, "w", encoding="utf-8") as f:
        f.write("\n".join(script_lines))
    
    print(f"Podcast generated successfully!")
    print(f"Audio: {output_file}")
    print(f"Script: {script_file}")
    print("\nScript:")
    for line in script_lines:
        print(line)
