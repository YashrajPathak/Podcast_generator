# two_agents_livekit_local.py ‚Äî full, self-contained
# Azure OpenAI (LLM) + Azure Speech (AAD) + LiveKit client (optional)
# Hear greeting and debate locally even without LiveKit server.
# pip install -U azure-cognitiveservices-speech azure-identity openai python-dotenv livekit

import os, sys, asyncio, wave, threading, queue
from dotenv import load_dotenv; load_dotenv()

# ---------- Azure OpenAI (LLM) ----------
from openai import AzureOpenAI
AZURE_OPENAI_KEY        = os.getenv("AZURE_OPENAI_KEY") or os.getenv("OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT   = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")
OPENAI_API_VERSION      = os.getenv("OPENAI_API_VERSION", "2024-05-01-preview")
if not all([AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT, OPENAI_API_VERSION]):
    raise RuntimeError("Missing Azure OpenAI env vars: AZURE_OPENAI_KEY/OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT, OPENAI_API_VERSION")

oai = AzureOpenAI(
    api_key=AZURE_OPENAI_KEY,
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    api_version=OPENAI_API_VERSION,
)

# ---------- Azure Speech (AAD, no Speech key) ----------
import azure.cognitiveservices.speech as speechsdk
from azure.identity import ClientSecretCredential

TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SPEECH_REGION = os.getenv("SPEECH_REGION", "eastus")
RESOURCE_ID   = os.getenv("RESOURCE_ID")  # optional
COG_SCOPE     = "https://cognitiveservices.azure.com/.default"

if not all([TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION]):
    raise RuntimeError("Missing AAD Speech env vars (TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION)")

cred = ClientSecretCredential(tenant_id=TENANT_ID, client_id=CLIENT_ID, client_secret=CLIENT_SECRET)

def cog_token_str() -> str:
    raw = cred.get_token(COG_SCOPE).token
    return f"aad#{RESOURCE_ID}#{raw}" if RESOURCE_ID else raw

# ---------- LiveKit (optional) ----------
# If LIVEKIT_WS + LIVEKIT_TOKEN are provided, publish tracks to the room.
# If not provided, we still speak locally via Azure (so you hear everything).
from livekit import rtc

LIVEKIT_WS    = os.getenv("LIVEKIT_WS", "").strip()
LIVEKIT_TOKEN = os.getenv("LIVEKIT_TOKEN", "").strip()
USE_LIVEKIT   = bool(LIVEKIT_WS and LIVEKIT_TOKEN)

SESSION_ID = os.getenv("SESSION_ID", "demo-session")
AGENT_A    = os.getenv("AGENT_A", "Agent A")
AGENT_B    = os.getenv("AGENT_B", "Agent B")
VOICE_A    = os.getenv("VOICE_A", "en-US-GuyNeural")
VOICE_B    = os.getenv("VOICE_B", "en-US-AriaNeural")

# Audio format for saving/publishing
SAMPLE_RATE, CHANNELS = 24000, 1  # 24kHz 16-bit mono PCM
SAMPLE_WIDTH = 2                  # bytes
FRAME_MS     = 20
SAMPLES_PER_CH  = SAMPLE_RATE * FRAME_MS // 1000
BYTES_PER_FRAME = SAMPLES_PER_CH * CHANNELS * SAMPLE_WIDTH

def track_name(agent: str) -> str:
    return f"{SESSION_ID}-{agent}-voice"

async def lk_connect(room: rtc.Room) -> bool:
    if not USE_LIVEKIT:
        print("üîå LiveKit: local-only mode (no server connection).")
        return False
    await room.connect(LIVEKIT_WS, LIVEKIT_TOKEN)
    print(f"üîå LiveKit: connected to {LIVEKIT_WS}")
    return True

async def publish_pcm_livekit(room: rtc.Room, agent_label: str, pcm: bytes):
    """
    Publish raw PCM (24kHz 16-bit mono) as a LiveKit LocalAudioTrack.
    Only call this when connected to a server.
    """
    source = rtc.AudioSource(sample_rate=SAMPLE_RATE, num_channels=CHANNELS)
    track  = rtc.LocalAudioTrack.create_audio_track(track_name(agent_label), source)
    await room.local_participant.publish_track(track)

    # Stream frames into the track
    for i in range(0, len(pcm), BYTES_PER_FRAME):
        seg = pcm[i:i+BYTES_PER_FRAME]
        if len(seg) < BYTES_PER_FRAME:
            break
        frame = rtc.AudioFrame(seg, SAMPLE_RATE, CHANNELS, SAMPLES_PER_CH)
        await source.capture_frame(frame)
        await asyncio.sleep(FRAME_MS / 1000)

# ---------- TTS helpers ----------
def tts_get_pcm(text: str, voice: str) -> bytes:
    """
    Synthesize text to raw PCM bytes using Azure Speech (AAD token).
    """
    cfg = speechsdk.SpeechConfig(auth_token=cog_token_str(), region=SPEECH_REGION)
    cfg.speech_synthesis_voice_name = voice
    cfg.set_speech_synthesis_output_format(
        speechsdk.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm
    )
    synth = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=None)
    res = synth.speak_text_async(text).get()
    if res.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
        raise RuntimeError(f"TTS failed: {res.reason}")
    return res.audio_data  # raw PCM

def local_speak(text: str, voice: str):
    """
    Speak out loud via default system speaker (no extra libs).
    """
    cfg = speechsdk.SpeechConfig(auth_token=cog_token_str(), region=SPEECH_REGION)
    cfg.speech_synthesis_voice_name = voice
    out = speechsdk.audio.AudioOutputConfig(use_default_speaker=True)
    syn = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=out)
    r = syn.speak_text_async(text).get()
    if r.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
        print("‚ö†Ô∏è Local speak failed:", r.reason)

# ---------- LLM prompts ----------
SYSTEM_A = (
    "You are Agent A, a friendly analyst. "
    "Speak 2‚Äì3 short sentences; reference the context; ask a probing question when helpful."
)
SYSTEM_B = (
    "You are Agent B, a pragmatic strategist. "
    "Speak 2‚Äì3 short sentences; build on or challenge A respectfully; propose next steps."
)

def llm_sync(panel_prompt: str, msg: str) -> str:
    r = oai.chat.completions.create(
        model=AZURE_OPENAI_DEPLOYMENT,
        messages=[
            {"role": "system", "content": panel_prompt},
            {"role": "user", "content": msg}
        ],
        max_tokens=220,
        temperature=0.8
    )
    return (r.choices[0].message.content or "").strip()

async def llm(panel_prompt: str, msg: str) -> str:
    # Run sync call in thread to avoid blocking loop
    return await asyncio.to_thread(llm_sync, panel_prompt, msg)

# ---------- Interrupt handling (parallel, smooth) ----------
# Dedicated thread reads stdin continuously and pushes lines to a thread-safe Queue.
# An asyncio task polls that queue and forwards into an asyncio.Queue for the loop.

_input_queue = queue.Queue()
interrupt_q: asyncio.Queue[str] = asyncio.Queue()

def _stdin_reader():
    while True:
        try:
            line = sys.stdin.readline()
            if not line:
                break
            text = line.strip()
            if text:
                _input_queue.put(text)
        except Exception:
            break

async def pump_interrupts():
    while True:
        try:
            text = _input_queue.get_nowait()
            await interrupt_q.put(text)
        except queue.Empty:
            await asyncio.sleep(0.05)

# ---------- Debate loop with saving ----------
async def run_with_saver():
    buffers: list[bytes] = []   # raw PCM segments for podcast.wav
    transcript: list[str] = []  # text transcript

    # Start stdin reader thread & pump task
    threading.Thread(target=_stdin_reader, daemon=True).start()
    asyncio.create_task(pump_interrupts())

    # LiveKit setup (optional)
    room = rtc.Room()
    connected = await lk_connect(room)

    # 1) Greeting (spoken)
    greet = "Hi Yashraj, how are you? Ready to listen to a debate on any topic or data? Just paste it below."
    print(f"\nüü¶ {AGENT_A} (greeting): {greet}\n")

    # Speak locally so you hear it even without LK; also capture PCM for saving/publishing
    local_speak(greet, VOICE_A)
    try:
        pcm = tts_get_pcm(greet, VOICE_A)
        buffers.append(pcm)
        if connected:
            await publish_pcm_livekit(room, AGENT_A, pcm)
    except Exception as e:
        print("‚ö†Ô∏è Greeting TTS error:", e)

    transcript.append(f"{AGENT_A}: {greet}")

    # 2) Ask for context (blocking once)
    print("üì• Paste your context and press Enter:")
    # Wait for the next line that is NOT the one we already consumed for greeting
    context_line = None
    while context_line is None:
        try:
            context_line = _input_queue.get(timeout=3600)
        except queue.Empty:
            pass
    context = context_line.strip()
    if not context:
        context = "Sample context about your topic."
    print("üìö Context captured. Starting debate...\n")

    # Warm-up (spoken)
    warm = await llm(SYSTEM_B, "Agent A greeted the user; reply briefly and warmly, then say you're ready.")
    print(f"üü© {AGENT_B}: {warm}\n")
    local_speak(warm, VOICE_B)
    try:
        pcm = tts_get_pcm(warm, VOICE_B)
        buffers.append(pcm)
        if connected:
            await publish_pcm_livekit(room, AGENT_B, pcm)
    except Exception as e:
        print("‚ö†Ô∏è Warm-up TTS error:", e)
    transcript.append(f"{AGENT_B}: {warm}")

    # 3) Continuous round-robin; consume any interrupts smoothly
    last = f"Context to discuss:\n{context}"
    try:
        while True:
            # Drain one interrupt if present
            intr = None
            try:
                intr = interrupt_q.get_nowait()
            except asyncio.QueueEmpty:
                pass
            if intr:
                last = f"User interruption: {intr}"
                print(f"üßë‚Äçüí¨ You: {intr}")

            # Agent A turn
            a_out = await llm(SYSTEM_A, last)
            print(f"\nüü¶ {AGENT_A}: {a_out}\n")
            local_speak(a_out, VOICE_A)
            try:
                pcm = tts_get_pcm(a_out, VOICE_A)
                buffers.append(pcm)
                if connected:
                    await publish_pcm_livekit(room, AGENT_A, pcm)
            except Exception as e:
                print("‚ö†Ô∏è TTS A error:", e)
            transcript.append(f"{AGENT_A}: {a_out}")

            # Check interrupt again before B
            intr = None
            try:
                intr = interrupt_q.get_nowait()
            except asyncio.QueueEmpty:
                pass

            b_in = f"{AGENT_A} said: {a_out}\nOriginal context (for reference):\n{context[:1500]}"
            if intr:
                b_in += f"\nUser interruption: {intr}"

            # Agent B turn
            b_out = await llm(SYSTEM_B, b_in)
            print(f"\nüü© {AGENT_B}: {b_out}\n")
            local_speak(b_out, VOICE_B)
            try:
                pcm = tts_get_pcm(b_out, VOICE_B)
                buffers.append(pcm)
                if connected:
                    await publish_pcm_livekit(room, AGENT_B, pcm)
            except Exception as e:
                print("‚ö†Ô∏è TTS B error:", e)
            transcript.append(f"{AGENT_B}: {b_out}")

            # Next loop uses B's output as the base
            last = b_out

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Debate stopped, saving podcast...")

        # Save transcript
        with open("podcast.txt", "w", encoding="utf-8") as f:
            f.write("üéôÔ∏è Podcast Transcript\n\n")
            f.write("\n".join(transcript))

        # Save audio WAV
        pcm_all = b"".join(buffers)
        with wave.open("podcast.wav", "wb") as wf:
            wf.setnchannels(1)
            wf.setsampwidth(SAMPLE_WIDTH)
            wf.setframerate(SAMPLE_RATE)
            wf.writeframes(pcm_all)

        print("‚úÖ Saved podcast.wav and podcast.txt")

        try:
            if connected:
                await room.disconnect()
        except Exception:
            pass

# ---------- Main ----------
if __name__ == "__main__":
    asyncio.run(run_with_saver())
