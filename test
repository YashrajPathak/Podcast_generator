# ========= Session Ending Helper =========
async def _end_session(state: SessionState, reason: str = "unspecified"):
    """Mark a session as ended, deactivate streaming, and persist."""
    try:
        if state.ended:
            return
        state.ended = True
        state.ended_reason = reason
        state.updated_at = time.time()

        # deactivate live stream
        stream_manager.deactivate(state.session_id)

        # cancel broadcaster task if still running
        if state.audio_broadcast_task and not state.audio_broadcast_task.done():
            state.audio_broadcast_task.cancel()

        # finalize audio if possible
        try:
            await _finalize_audio(state)
        except Exception as e:
            logger.warning(f"end_session finalize_audio failed: {e}")

        await store.upsert(state)
        logger.info(f"end_session_ok session_id={state.session_id} reason={reason}")
    except Exception as e:
        logger.error(f"end_session_error session_id={getattr(state,'session_id','?')} err={e}")
