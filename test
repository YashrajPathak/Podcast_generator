# two_agents_livekit_local.py ‚Äî AAD + Azure OpenAI + PyDub playback (no simpleaudio)
# Local-only LiveKit (not publishing). Greeting is spoken; context paste; round-robin debate;
# keyboard interruptions; saves podcast.wav + podcast.txt on Ctrl+C.

import os, sys, asyncio, wave
from dotenv import load_dotenv; load_dotenv()

# ---------- Azure OpenAI ----------
from openai import AzureOpenAI
AZURE_OPENAI_KEY        = os.getenv("AZURE_OPENAI_KEY") or os.getenv("OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT   = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")
OPENAI_API_VERSION      = os.getenv("OPENAI_API_VERSION", "2024-05-01-preview")
if not all([AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT, OPENAI_API_VERSION]):
    raise RuntimeError("Missing Azure OpenAI env vars")
oai = AzureOpenAI(api_key=AZURE_OPENAI_KEY, azure_endpoint=AZURE_OPENAI_ENDPOINT, api_version=OPENAI_API_VERSION)

# ---------- Azure Speech (AAD, no speech key) ----------
import azure.cognitiveservices.speech as speechsdk
from azure.identity import ClientSecretCredential
TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SPEECH_REGION = os.getenv("SPEECH_REGION", "eastus")
RESOURCE_ID   = os.getenv("RESOURCE_ID")  # optional
COG_SCOPE     = "https://cognitiveservices.azure.com/.default"
if not all([TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION]):
    raise RuntimeError("Missing AAD Speech env vars (TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION)")
cred = ClientSecretCredential(tenant_id=TENANT_ID, client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
def cog_token_str() -> str:
    raw = cred.get_token(COG_SCOPE).token
    return f"aad#{RESOURCE_ID}#{raw}" if RESOURCE_ID else raw

# ---------- LiveKit (import only; we won‚Äôt publish in local-only mode) ----------
from livekit import rtc

# ---------- PyDub for local audio playback ----------
from pydub import AudioSegment
from pydub.playback import play

SESSION_ID = "demo-session"
AGENT_A    = "Agent A"
AGENT_B    = "Agent B"
VOICE_A    = "en-US-GuyNeural"
VOICE_B    = "en-US-AriaNeural"

# Audio format (matches Azure TTS we request)
SAMPLE_RATE, CHANNELS = 24000, 1   # 24kHz mono
SAMPLE_WIDTH = 2                   # 16-bit

# ---------- LLM prompts ----------
SYSTEM_A = ("You are Agent A, a friendly analyst. "
            "Speak 2‚Äì3 short sentences; reference the context; ask a probing question.")
SYSTEM_B = ("You are Agent B, a pragmatic strategist. "
            "Speak 2‚Äì3 short sentences; build on/challenge A respectfully; propose next steps.")

async def llm(panel_prompt: str, msg: str) -> str:
    r = await asyncio.to_thread(lambda:
        oai.chat.completions.create(
            model=AZURE_OPENAI_DEPLOYMENT,
            messages=[{"role": "system", "content": panel_prompt},
                      {"role": "user", "content": msg}],
            max_tokens=220,
            temperature=0.8
        )
    )
    return (r.choices[0].message.content or "").strip()

# ---------- Interrupt handling (type a line + Enter any time) ----------
interrupt_q: asyncio.Queue[str] = asyncio.Queue()

async def read_interrupts():
    print("‚è∏  Type an interruption anytime and press Enter.")
    while True:
        try:
            line = await asyncio.to_thread(sys.stdin.readline)
            if not line:
                await asyncio.sleep(0.05); continue
            text = line.strip()
            if text:
                await interrupt_q.put(text)
        except Exception:
            await asyncio.sleep(0.1)

# ---------- Text-to-speech (AAD) and playback with PyDub ----------
def _tts_result_to_pcm(res: speechsdk.SpeechSynthesisResult) -> bytes:
    stream = speechsdk.AudioDataStream(res)
    chunks = []
    buf = bytearray(8192)
    while True:
        n = stream.read_data(buf)
        if n == 0:
            break
        chunks.append(bytes(buf[:n]))
    return b"".join(chunks)

async def tts_and_play(text: str, voice: str) -> bytes:
    cfg = speechsdk.SpeechConfig(auth_token=cog_token_str(), region=SPEECH_REGION)
    cfg.speech_synthesis_voice_name = voice
    cfg.set_speech_synthesis_output_format(
        speechsdk.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm
    )
    synth = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=None)
    res = await asyncio.to_thread(lambda: synth.speak_text_async(text).get())
    if res.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
        print(f"‚ùå TTS failed: {res.reason}")
        return b""
    pcm = _tts_result_to_pcm(res)

    # Play locally with PyDub in a background thread (non-blocking for event loop)
    segment = AudioSegment(
        data=pcm,
        sample_width=SAMPLE_WIDTH,
        frame_rate=SAMPLE_RATE,
        channels=CHANNELS
    )
    await asyncio.to_thread(play, segment)
    return pcm

# ---------- Debate runner with save-on-exit ----------
async def run_with_saver():
    # LiveKit room (local-only; we don‚Äôt publish)
    room = rtc.Room()
    print("üîå LiveKit: local-only mode (no server connection).")

    buffers: list[bytes] = []
    transcript: list[str] = []

    # Start background interrupt reader
    asyncio.create_task(read_interrupts())

    # 1) Spoken greeting
    greet = "Hi Yashraj, how are you? Ready to listen to a debate on any topic or data? Just paste it below."
    print(f"\nüü¶ {AGENT_A} (greeting): {greet}\n")
    pcm = await tts_and_play(greet, VOICE_A)
    if pcm: buffers.append(pcm)
    transcript.append(f"{AGENT_A}: {greet}")

    # 2) Context paste (blocking once)
    print("üì• Paste your context and press Enter:")
    context = sys.stdin.readline().strip()
    if not context:
        context = "Sample context about your topic."
    print("üìö Context captured. Starting debate...\n")

    # Warm-up from B
    warm = await llm(SYSTEM_B, "Agent A greeted the user; reply briefly and warmly, then mention you're ready.")
    print(f"üü© {AGENT_B}: {warm}\n")
    pcm = await tts_and_play(warm, VOICE_B)
    if pcm: buffers.append(pcm)
    transcript.append(f"{AGENT_B}: {warm}")

    last = f"Context:\n{context}"

    try:
        while True:
            # Agent A turn (respect latest interrupt if any)
            intr = None
            try: intr = interrupt_q.get_nowait()
            except asyncio.QueueEmpty: pass
            if intr: last = f"User interruption: {intr}"

            a_out = await llm(SYSTEM_A, last)
            print(f"\nüü¶ {AGENT_A}: {a_out}\n")
            pcm = await tts_and_play(a_out, VOICE_A)
            if pcm: buffers.append(pcm)
            transcript.append(f"{AGENT_A}: {a_out}")

            # Agent B turn (check interrupt again)
            intr = None
            try: intr = interrupt_q.get_nowait()
            except asyncio.QueueEmpty: pass
            b_in = f"{AGENT_A} said: {a_out}\nOriginal context:\n{context[:1500]}"
            if intr: b_in += f"\nUser interruption: {intr}"

            b_out = await llm(SYSTEM_B, b_in)
            print(f"\nüü© {AGENT_B}: {b_out}\n")
            pcm = await tts_and_play(b_out, VOICE_B)
            if pcm: buffers.append(pcm)
            transcript.append(f"{AGENT_B}: {b_out}")

            last = b_out

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Stopped by user, saving podcast...")

        # Save transcript
        with open("podcast.txt", "w", encoding="utf-8") as f:
            f.write("üéôÔ∏è Podcast Transcript\n\n")
            f.write("\n".join(transcript))

        # Save audio
        pcm_all = b"".join(buffers)
        with wave.open("podcast.wav", "wb") as wf:
            wf.setnchannels(1)
            wf.setsampwidth(2)          # 16-bit
            wf.setframerate(SAMPLE_RATE)
            wf.writeframes(pcm_all)

        print("‚úÖ Saved podcast.wav and podcast.txt")

# ---------- Main ----------
if __name__ == "__main__":
    asyncio.run(run_with_saver())
