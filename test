# --- graph.py (inside your agent-response handling) ---
import httpx
from pathlib import Path

audio_data = b""
audio_hex = (data or {}).get("audio_hex")
audio_path = (data or {}).get("audio_path")

# 1) Inline hex wins
if isinstance(audio_hex, str) and audio_hex:
    try:
        audio_data = bytes.fromhex(audio_hex)
    except Exception:
        audio_data = b""

# 2) Local path
if not audio_data and isinstance(audio_path, str) and audio_path:
    try:
        p = Path(audio_path)
        if p.exists():
            audio_data = p.read_bytes()
    except Exception:
        audio_data = b""

# 3) HTTP URL (last resort)
if not audio_data and isinstance(audio_path, str) and audio_path.startswith(("http://","https://")):
    try:
        async with httpx.AsyncClient(timeout=settings.AGENT_TIMEOUT) as c:
            r = await c.get(audio_path)
        if r.status_code == 200 and r.content:
            audio_data = r.content
    except Exception:
        audio_data = b""

# 4) Persist if we have bytes
if audio_data:
    outdir = Path(settings.FINAL_AUDIO_DIR or "audio_cache")
    outdir.mkdir(parents=True, exist_ok=True)
    fname = f"{agent_key}_{uuid.uuid4().hex}.wav"
    (outdir / fname).write_bytes(audio_data)
    turn.audio_path = str(outdir / fname)
    turn.audio_data = b""
