# two_agents_livekit_hybrid.py
# Azure OpenAI + Azure Speech (AAD) + LiveKit (hybrid: server if available, always local playback)
# pip install -U livekit azure-cognitiveservices-speech azure-identity openai python-dotenv pydub

import os, sys, asyncio, wave, io
from dotenv import load_dotenv; load_dotenv()

# ---------- Azure OpenAI ----------
from openai import AzureOpenAI
AZURE_OPENAI_KEY        = os.getenv("AZURE_OPENAI_KEY") or os.getenv("OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT   = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")
OPENAI_API_VERSION      = os.getenv("OPENAI_API_VERSION", "2024-05-01-preview")
if not all([AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT, OPENAI_API_VERSION]):
    raise RuntimeError("Missing Azure OpenAI env vars")

oai = AzureOpenAI(api_key=AZURE_OPENAI_KEY, azure_endpoint=AZURE_OPENAI_ENDPOINT, api_version=OPENAI_API_VERSION)

# ---------- Azure Speech (AAD) ----------
import azure.cognitiveservices.speech as speechsdk
from azure.identity import ClientSecretCredential

TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SPEECH_REGION = os.getenv("SPEECH_REGION", "eastus")
RESOURCE_ID   = os.getenv("RESOURCE_ID")  # optional
COG_SCOPE     = "https://cognitiveservices.azure.com/.default"

if not all([TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION]):
    raise RuntimeError("Missing AAD Speech env vars (TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION)")

cred = ClientSecretCredential(tenant_id=TENANT_ID, client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
def cog_token_str() -> str:
    raw = cred.get_token(COG_SCOPE).token
    return f"aad#{RESOURCE_ID}#{raw}" if RESOURCE_ID else raw

# ---------- LiveKit (optional server mode) ----------
from livekit import rtc
LIVEKIT_WS    = os.getenv("LIVEKIT_WS")
LIVEKIT_TOKEN = os.getenv("LIVEKIT_TOKEN")
USE_LK_SERVER = bool(LIVEKIT_WS and LIVEKIT_TOKEN)

SESSION_ID = os.getenv("SESSION_ID", "demo-session")
AGENT_A    = os.getenv("AGENT_A", "Agent A")
AGENT_B    = os.getenv("AGENT_B", "Agent B")
VOICE_A    = os.getenv("VOICE_A", "en-US-GuyNeural")
VOICE_B    = os.getenv("VOICE_B", "en-US-AriaNeural")

SAMPLE_RATE, CHANNELS, FRAME_MS = 24000, 1, 20
SAMPLES_PER_CH  = SAMPLE_RATE * FRAME_MS // 1000
BYTES_PER_FRAME = SAMPLES_PER_CH * CHANNELS * 2  # 16-bit mono

def track_name(agent: str) -> str:
    return f"{SESSION_ID}-{agent}-voice"

# ---------- Local playback (always on) ----------
# We use pydub for guaranteed local playback regardless of LiveKit server availability.
from pydub import AudioSegment
from pydub.playback import play

def play_pcm_locally(pcm_bytes: bytes):
    # pcm is raw 16-bit mono 24kHz; wrap in WAV header via in-memory wave write then play
    buf = io.BytesIO()
    with wave.open(buf, "wb") as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)        # 16-bit
        wf.setframerate(SAMPLE_RATE)
        wf.writeframes(pcm_bytes)
    buf.seek(0)
    seg = AudioSegment.from_file(buf, format="wav")
    play(seg)

# ---------- LiveKit helpers ----------
async def lk_connect(room: rtc.Room):
    if not USE_LK_SERVER:
        print("üîå LiveKit: local-only playback (no server). Tracks won't be published.")
        return
    await room.connect(LIVEKIT_WS, LIVEKIT_TOKEN)
    print(f"üîå LiveKit: connected -> {LIVEKIT_WS}")

async def lk_publish_pcm(room: rtc.Room, agent_label: str, pcm_bytes: bytes):
    """If connected to a LiveKit server, publish pcm as a local track; otherwise no-op."""
    if not USE_LK_SERVER:
        return
    source = rtc.AudioSource(sample_rate=SAMPLE_RATE, num_channels=CHANNELS)
    track  = rtc.LocalAudioTrack.create_audio_track(track_name(agent_label), source)
    await room.local_participant.publish_track(track)

    # Push frames
    for i in range(0, len(pcm_bytes), BYTES_PER_FRAME):
        seg = pcm_bytes[i:i+BYTES_PER_FRAME]
        if len(seg) < BYTES_PER_FRAME:
            break
        frame = rtc.AudioFrame(seg, SAMPLE_RATE, CHANNELS, SAMPLES_PER_CH)
        await source.capture_frame(frame)
        await asyncio.sleep(FRAME_MS / 1000)

# ---------- Speech synth (AAD token) ----------
async def tts_to_pcm(text: str, voice: str) -> bytes:
    cfg = speechsdk.SpeechConfig(auth_token=cog_token_str(), region=SPEECH_REGION)
    cfg.speech_synthesis_voice_name = voice
    cfg.set_speech_synthesis_output_format(
        speechsdk.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm
    )
    synth = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=None)
    res = await asyncio.to_thread(lambda: synth.speak_text_async(text).get())
    if res.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
        raise RuntimeError(f"Azure TTS failed: {res.reason}")
    # result is WAV RIFF or RAW according to format; Raw24Khz16BitMonoPcm delivers pure PCM
    return res.audio_data

# ---------- LLM prompts ----------
SYSTEM_A = ("You are Agent A, a friendly analyst. "
            "Use 2‚Äì3 short sentences; reference context; ask a probing question when helpful.")
SYSTEM_B = ("You are Agent B, a pragmatic strategist. "
            "Use 2‚Äì3 short sentences; build on or challenge A respectfully; propose next steps.")

async def llm(panel_prompt: str, msg: str) -> str:
    r = await asyncio.to_thread(lambda: oai.chat.completions.create(
        model=AZURE_OPENAI_DEPLOYMENT,
        messages=[{"role": "system", "content": panel_prompt},
                  {"role": "user",   "content": msg}],
        max_tokens=220, temperature=0.8
    ))
    return (r.choices[0].message.content or "").strip()

# ---------- Interrupt handling ----------
interrupt_q: asyncio.Queue[str] = asyncio.Queue()

async def interrupt_watcher():
    """
    Non-blocking keyboard interrupt:
      - Press 'i' then Enter to enter interrupt mode.
      - Type your line, press Enter -> queued for next turn.
    """
    print("‚è∏  Press 'i' + Enter anytime to interrupt; then type your line and Enter.")
    loop = asyncio.get_running_loop()
    while True:
        line = await asyncio.to_thread(sys.stdin.readline)
        if not line:
            await asyncio.sleep(0.05); continue
        line = line.strip()
        if line.lower() == "i":
            # ask for the line
            print("üé§ Say your interruption (type text) and press Enter:")
            text = await asyncio.to_thread(sys.stdin.readline)
            text = (text or "").strip()
            if text:
                await interrupt_q.put(text)
                print("‚úÖ Interruption queued.")
        else:
            # Ignore random input to avoid colliding with main paste step
            pass

# ---------- Debate runner (saves podcast + transcript) ----------
async def run_podcast():
    transcript: list[str] = []
    full_pcm_chunks: list[bytes] = []

    room = rtc.Room()
    await lk_connect(room)

    # 1) Greeting (spoken + local playback + (optional) publish)
    greet = "Hi Yashraj, how are you? Ready to listen to a debate on any topic or data? Just paste it below."
    print(f"\nüü¶ {AGENT_A} (greeting): {greet}\n")
    pcm = await tts_to_pcm(greet, VOICE_A)
    play_pcm_locally(pcm)
    await lk_publish_pcm(room, AGENT_A, pcm)
    transcript.append(f"{AGENT_A}: {greet}")
    full_pcm_chunks.append(pcm)

    # 2) Paste context once (blocking)
    print("üì• Paste your context (then press Enter):")
    context = sys.stdin.readline().strip()
    if not context:
        context = "Sample context about your topic."
    print("üìö Context captured. Starting debate...\n")

    # 2b) Warm-up from B
    warm = await llm(SYSTEM_B, "Agent A greeted the user; reply warmly in 1‚Äì2 sentences and say you're ready.")
    print(f"üü© {AGENT_B}: {warm}\n")
    pcm = await tts_to_pcm(warm, VOICE_B)
    play_pcm_locally(pcm)
    await lk_publish_pcm(room, AGENT_B, pcm)
    transcript.append(f"{AGENT_B}: {warm}")
    full_pcm_chunks.append(pcm)

    # 3) Start interrupt watcher
    asyncio.create_task(interrupt_watcher())

    last = f"Context:\n{context}"
    try:
        while True:
            # Agent A
            try:
                intr = interrupt_q.get_nowait()
                last = f"User interruption: {intr}"
            except asyncio.QueueEmpty:
                pass

            a_out = await llm(SYSTEM_A, last)
            print(f"\nüü¶ {AGENT_A}: {a_out}\n")
            pcm = await tts_to_pcm(a_out, VOICE_A)
            play_pcm_locally(pcm)
            await lk_publish_pcm(room, AGENT_A, pcm)
            transcript.append(f"{AGENT_A}: {a_out}")
            full_pcm_chunks.append(pcm)

            # Agent B
            try:
                intr = interrupt_q.get_nowait()
            except asyncio.QueueEmpty:
                intr = None
            b_in = f"{AGENT_A} said: {a_out}\nOriginal context (for reference):\n{context[:1500]}"
            if intr:
                b_in += f"\nUser interruption: {intr}"
            b_out = await llm(SYSTEM_B, b_in)
            print(f"\nüü© {AGENT_B}: {b_out}\n")
            pcm = await tts_to_pcm(b_out, VOICE_B)
            play_pcm_locally(pcm)
            await lk_publish_pcm(room, AGENT_B, pcm)
            transcript.append(f"{AGENT_B}: {b_out}")
            full_pcm_chunks.append(pcm)

            last = b_out

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Stopping & saving...")

        # Save transcript
        with open("podcast.txt", "w", encoding="utf-8") as f:
            f.write("üéôÔ∏è Podcast Transcript\n\n")
            f.write("\n".join(transcript))

        # Save WAV
        pcm_all = b"".join(full_pcm_chunks)
        with wave.open("podcast.wav", "wb") as wf:
            wf.setnchannels(1)
            wf.setsampwidth(2)
            wf.setframerate(SAMPLE_RATE)
            wf.writeframes(pcm_all)

        print("‚úÖ Saved podcast.wav and podcast.txt")

# ---------- Main ----------
if __name__ == "__main__":
    asyncio.run(run_podcast())
