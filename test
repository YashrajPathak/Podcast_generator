# ========= Auto-play helpers for frontends =========
def _safe_read_file_bytes(p: str) -> bytes:
    try:
        return Path(p).read_bytes()
    except Exception:
        return b""

@app.post("/session/{session_id}/next-audio")
async def get_next_unplayed_audio(session_id: str):
    """
    Returns the next unplayed turn's audio as base64 (WAV), and marks it as played.
    Response:
      - { "status": "ok", "turn_id": int, "agent": str, "audio_b64": str, "mime": "audio/wav" }
      - { "status": "none" }  if nothing to play yet
    """
    st = await store.get(session_id)
    if not st:
        raise HTTPException(status_code=404, detail="Session not found")

    # find next unplayed turn with audio
    for tid in sorted(st.turn_audio.keys()):
        meta = st.turn_audio.get(tid) or {}
        if not isinstance(meta, dict):
            continue
        if meta.get("played"):
            continue
        p = meta.get("path")
        if not p or not Path(p).exists():
            # mark as played to skip broken entry
            meta["played"] = True
            continue

        # read and mark played
        audio_bytes = _safe_read_file_bytes(p)
        meta["played"] = True
        st.updated_at = time.time()
        await store.upsert(st)

        return {
            "status": "ok",
            "turn_id": tid,
            "agent": meta.get("speaker"),
            "audio_b64": base64.b64encode(audio_bytes).decode("ascii"),
            "mime": "audio/wav",
        }

    return {"status": "none"}

@app.post("/session/{session_id}/reset-playback")
async def reset_playback(session_id: str):
    """
    Marks all turn audios as unplayed. Useful to replay from the beginning.
    """
    st = await store.get(session_id)
    if not st:
        raise HTTPException(status_code=404, detail="Session not found")
    for _, meta in (st.turn_audio or {}).items():
        if isinstance(meta, dict):
            meta["played"] = False
    st.updated_at = time.time()
    await store.upsert(st)
    return {"status": "ok", "reset": True}
