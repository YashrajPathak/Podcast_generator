# ------------------------- WebSocket Server for Real-time Updates ----------
try:
    import websockets
    _WEBSOCKETS_AVAILABLE = True
except ImportError:
    _WEBSOCKETS_AVAILABLE = False
    print("⚠️  websockets module not available. Real-time visualization disabled.")
    print("   Install with: pip install websockets")

# Global WebSocket connections
_websocket_connections = set()
_websocket_port = 8003

# WebSocket server for real-time updates
async def websocket_server(websocket, path):
    _websocket_connections.add(websocket)
    try:
        await websocket.wait_closed()
    finally:
        _websocket_connections.remove(websocket)

async def broadcast_websocket_message(data):
    if not _websocket_connections:
        return
        
    message = json.dumps(data)
    for connection in _websocket_connections.copy():
        try:
            await connection.send(message)
        except Exception:
            _websocket_connections.remove(connection)

# Start WebSocket server in background with port fallback
def start_websocket_server():
    if not _WEBSOCKETS_AVAILABLE:
        return
        
    async def server_main():
        global _websocket_port
        for port in range(8003, 8010):  # Try ports 8003-8009
            try:
                server = await websockets.serve(websocket_server, "localhost", port)
                _websocket_port = port
                print(f"WebSocket server running on ws://localhost:{port}")
                await server.wait_closed()
                break
            except OSError as e:
                if "address already in use" in str(e).lower() or "access permissions" in str(e).lower():
                    print(f"Port {port} unavailable, trying next port...")
                    continue
                else:
                    raise
        else:
            print("⚠️  Could not find available port for WebSocket server")
    
    # Run WebSocket server in background
    asyncio.create_task(server_main())
