def _write_mermaid_bundle(compiled_graph, session_id: str) -> Optional[str]:
    try:
        mermaid = compiled_graph.get_graph().draw_mermaid()
    except Exception:
        return None
    
    # Create the HTML content
    html = f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>LangGraph · {session_id}</title>
  <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
  <style>
    body {{
      margin: 0;
      padding: 16px;
      font-family: system-ui;
      background: #0f172a;
      color: #f8fafc;
    }}
    .wrap {{
      max-width: 1200px;
      margin: auto;
    }}
    .status {{
      background: #1e293b;
      padding: 16px;
      border-radius: 8px;
      margin-bottom: 16px;
    }}
    .current-node {{
      color: #3b82f6;
      font-weight: bold;
    }}
    #updates {{
      max-height: 200px;
      overflow-y: auto;
      background: #1e293b;
      padding: 8px;
      border-radius: 4px;
      margin-top: 16px;
    }}
    .update {{
      margin: 4px 0;
      padding: 4px;
      border-left: 3px solid #3b82f6;
    }}
  </style>
</head>
<body>
<div class="wrap">
  <h3>LangGraph Diagram — {session_id}</h3>
  
  <div class="status">
    <h4>Current Status: <span id="current-status">Initializing</span></h4>
    <div id="updates"></div>
  </div>
  
  <div class="mermaid" id="mermaid-diagram">
    {mermaid}
  </div>
</div>

<script>
  mermaid.initialize({{startOnLoad: true, securityLevel: "loose", theme: "dark"}});
  
  // Function to update the visualization
  function updateStatus(nodeName, eventType) {{
    const statusEl = document.getElementById('current-status');
    const updatesEl = document.getElementById('updates');
    
    statusEl.textContent = nodeName || 'Processing';
    
    if (nodeName) {{
      const update = document.createElement('div');
      update.className = 'update';
      update.textContent = `[${{new Date().toLocaleTimeString()}}] ${{eventType.toUpperCase()}} - ${{nodeName}}`;
      updatesEl.appendChild(update);
      updatesEl.scrollTop = updatesEl.scrollHeight;
    }}
  }}
  
  // Set up WebSocket connection for real-time updates
  const ws = new WebSocket('ws://localhost:{_websocket_port}/');
  ws.onmessage = function(event) {{
    const data = JSON.parse(event.data);
    updateStatus(data.node, data.event);
  }};
  
  ws.onerror = function(error) {{
    console.log('WebSocket Error:', error);
  }};
  
  ws.onopen = function() {{
    console.log('WebSocket connection established');
  }};
</script>
</body>
</html>"""
    
    # Save HTML to file
    html_path = Path(f"graph_{session_id}.html")
    html_path.write_text(html, encoding="utf-8")
    
    # Start the visualization server
    start_visualization_server(html)
    
    try:
        webbrowser.open_new_tab(f"http://localhost:8002/")
    except Exception:
        pass
    
    return str(html_path)
