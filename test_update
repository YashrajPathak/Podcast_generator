# podcast_offline_version1.py — 2-minute audio-only A/B debate (one sentence/turn)
# Asks for files first; covers ALL metrics every turn; saves audio + script + notes + jsonl
# Azure OpenAI (LLM) + Azure Speech (AAD) — final WAV only; no dialogue prints
# pip install -U azure-cognitiveservices-speech azure-identity openai python-dotenv

import os, sys, re, math, wave, json, tempfile, asyncio, datetime
from pathlib import Path
from dotenv import load_dotenv; load_dotenv()

# ========== Azure OpenAI ==========
from openai import AzureOpenAI
AZURE_OPENAI_KEY        = os.getenv("AZURE_OPENAI_KEY") or os.getenv("OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT   = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4o")
OPENAI_API_VERSION      = os.getenv("OPENAI_API_VERSION", "2024-05-01-preview")
if not all([AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT, OPENAI_API_VERSION]):
    raise RuntimeError("Missing Azure OpenAI env vars")

oai = AzureOpenAI(api_key=AZURE_OPENAI_KEY, azure_endpoint=AZURE_OPENAI_ENDPOINT, api_version=OPENAI_API_VERSION)

def llm_sync(system: str, user: str, max_tokens: int, temperature: float) -> str:
    r = oai.chat.completions.create(
        model=AZURE_OPENAI_DEPLOYMENT,
        messages=[{"role":"system","content":system},{"role":"user","content":user}],
        max_tokens=max_tokens, temperature=temperature)
    return (r.choices[0].message.content or "").strip()

async def llm(system: str, user: str, max_tokens: int=160, temperature: float=0.5) -> str:
    return await asyncio.to_thread(llm_sync, system, user, max_tokens, temperature)

# ========== Azure Speech (AAD) ==========
import azure.cognitiveservices.speech as speechsdk
from azure.identity import ClientSecretCredential

TENANT_ID     = os.getenv("TENANT_ID")
CLIENT_ID     = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SPEECH_REGION = os.getenv("SPEECH_REGION", "eastus")
RESOURCE_ID   = os.getenv("RESOURCE_ID")  # optional
COG_SCOPE     = "https://cognitiveservices.azure.com/.default"
if not all([TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION]):
    raise RuntimeError("Missing AAD Speech env vars (TENANT_ID, CLIENT_ID, CLIENT_SECRET, SPEECH_REGION)")

cred = ClientSecretCredential(tenant_id=TENANT_ID, client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
def cog_token_str() -> str:
    tok = cred.get_token(COG_SCOPE).token
    return f"aad#{RESOURCE_ID}#{tok}" if RESOURCE_ID else tok

VOICE_A = os.getenv("VOICE_A", "en-US-GuyNeural")   # senior analyst
VOICE_B = os.getenv("VOICE_B", "en-US-AriaNeural")  # senior strategist

def ssml_wrapper(inner: str, voice: str, style: str | None, rate: str, pitch: str) -> str:
    if style:
        return f"""<speak version="1.0" xml:lang="en-US"
                 xmlns="http://www.w3.org/2001/10/synthesis"
                 xmlns:mstts="http://www.w3.org/2001/mstts">
  <voice name="{voice}">
    <mstts:express-as style="{style}">
      <prosody rate="{rate}" pitch="{pitch}">
        {inner}
      </prosody>
    </mstts:express-as>
  </voice>
</speak>"""
    else:
        return f"""<speak version="1.0" xml:lang="en-US"
                 xmlns="http://www.w3.org/2001/10/synthesis">
  <voice name="{voice}">
    <prosody rate="{rate}" pitch="{pitch}">
      {inner}
    </prosody>
  </voice>
</speak>"""

def to_ssml(text: str, voice: str, style: str | None, rate: str = "-6%", pitch: str = "-1%") -> str:
    # Pace with short pauses between clauses
    # add a tiny break after commas/semicolons to reduce slurring
    t = re.sub(r',\s*', ", <break time='120ms'/>", text.strip())
    t = re.sub(r';\s*', "; <break time='140ms'/>", t)
    # add a slightly longer break at sentence end (we'll speak one sentence but keep safety)
    t = re.sub(r'([.!?])\s*$', r"\1 <break time='220ms'/>", t)
    inner = t if t else text
    return ssml_wrapper(inner, voice, style, rate, pitch)

def tts_ssml_to_wav_with_fallback(text: str, voice: str, style: str | None, rate: str, pitch: str) -> str:
    cfg = speechsdk.SpeechConfig(auth_token=cog_token_str(), region=SPEECH_REGION)
    cfg.set_speech_synthesis_output_format(speechsdk.SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm)

    fd, tmp_path = tempfile.mkstemp(prefix="agent_tts_", suffix=".wav"); os.close(fd)
    try_styles = [style, None] if style else [None]

    for sty in try_styles:
        ssml = to_ssml(text, voice, sty, rate, pitch)
        audio_cfg = speechsdk.audio.AudioOutputConfig(filename=tmp_path)
        synth = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=audio_cfg)
        res = synth.speak_ssml_async(ssml).get()
        if res.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            return tmp_path
    # last fallback: plain text
    audio_cfg = speechsdk.audio.AudioOutputConfig(filename=tmp_path)
    synth = speechsdk.SpeechSynthesizer(speech_config=cfg, audio_config=audio_cfg)
    res = synth.speak_text_async(text).get()
    if res.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
        return tmp_path

    try: os.remove(tmp_path)
    except Exception: pass
    raise RuntimeError("TTS canceled even after SSML/style fallbacks")

def get_wav_duration_seconds(path: str) -> float:
    with wave.open(path, "rb") as r:
        frames = r.getnframes(); rate = r.getframerate()
        return frames / float(rate) if rate else 0.0

def append_wav_into_master(src_path: str, master_wf: wave.Wave_write):
    with wave.open(src_path, "rb") as r:
        frames = r.readframes(r.getnframes())
        master_wf.writeframes(frames)

def strip_markup(text: str) -> str:
    t = re.sub(r'[`*_#>]+', ' ', text)
    t = re.sub(r'\s{2,}', ' ', t).strip()
    return t

def first_sentence(text: str) -> str:
    """Force exactly one sentence; take the first non-empty sentence."""
    # Split on terminal punctuation followed by space or end
    parts = re.split(r'(?<=[.!?])\s+', text.strip())
    for p in parts:
        s = p.strip()
        if s:
            # ensure it ends with a period if missing terminal punctuation
            return s if re.search(r'[.!?]$', s) else s + "."
    return text.strip() or "."

# ========== Simple audio stingers (intro/outro) ==========
def synth_tone(duration_s: float = 0.35, freq: int = 520, vol: float = 0.25, rate: int = 24000) -> str:
    import struct
    n = int(duration_s * rate)
    frames = bytearray()
    for i in range(n):
        samp = int(vol * 32767.0 * math.sin(2 * math.pi * freq * (i / rate)))
        frames += struct.pack('<h', samp)
    fd, p = tempfile.mkstemp(prefix="tone_", suffix=".wav"); os.close(fd)
    with wave.open(p, "wb") as w:
        w.setnchannels(1); w.setsampwidth(2); w.setframerate(rate)
        w.writeframes(frames)
    return p

# ========== Prompts (expert, covers ALL metrics, single-sentence turns) ==========
SYSTEM_A = """
You are Agent A, a senior data analyst debating live with Agent B (a strategist).
Speak exactly ONE sentence (≈20–25 words), natural tone, no lists or headings.
Every sentence must reference ALL areas: weekly aggregates (2022–2025: ranges, YTD, MoM/WoW) AND monthly KPIs (ASA seconds, Call Duration minutes, Claim Time days) with concrete signals, then pose a sharp question to B at the end.
"""

SYSTEM_B = """
You are Agent B, a senior strategist responding to Agent A.
Speak exactly ONE sentence (≈20–25 words), natural tone, no lists or headings.
Diagnose causes across ALL areas (weekly aggregates + ASA + Call Duration + Claim Time), challenge/refine A with a plausible mechanism, and end with a concrete next step for A.
"""

# ========== File selection (asks FIRST) ==========
def ask_file_choice() -> str:
    base = Path(".").resolve()
    jsons = [p for p in base.iterdir() if p.suffix.lower() == ".json"]
    names = [p.name for p in jsons]
    print("JSON files in folder:", names)
    print("Type one of: data.json, metric.json, metric_data.json, both (recommended), or an exact filename, then Enter:")
    choice = sys.stdin.readline().strip().lower()
    return choice or "both"

def load_context(choice: str) -> tuple[str, dict]:
    ctx = ""
    meta = {"files":[]}
    def add_file(fname: str):
        p = Path(fname)
        if p.exists():
            meta["files"].append(fname)
            return f"[{fname}]\n{p.read_text(encoding='utf-8', errors='ignore')}\n\n"
        return ""
    # map for convenience
    if choice == "both":
        ctx += add_file("data.json")
        # prefer metric_data.json if present; else metric.json
        if Path("metric_data.json").exists():
            ctx += add_file("metric_data.json")
        else:
            ctx += add_file("metric.json")
    else:
        p = Path(choice)
        if p.exists() and p.suffix.lower()==".json":
            ctx += add_file(p.name)
        else:
            if "data" in choice:   ctx += add_file("data.json")
            if "metric_data" in choice: ctx += add_file("metric_data.json")
            elif "metric" in choice:    ctx += add_file("metric.json")
    if not ctx:
        # fallback combine if present
        if Path("data.json").exists():            ctx += add_file("data.json")
        if Path("metric_data.json").exists():     ctx += add_file("metric_data.json")
        elif Path("metric.json").exists():        ctx += add_file("metric.json")
    if not ctx:
        raise RuntimeError("No data found (need data.json and/or metric_data.json in the current folder).")
    return ctx, meta

# ========== Turn Budgeting & voices ==========
TARGET_SECONDS = 120.0
TURNS = 6  # A/B x 6 ≈ ~2 minutes with single-sentence turns

def make_a_audio(text: str) -> str:
    clean = strip_markup(first_sentence(text))
    return tts_ssml_to_wav_with_fallback(clean, VOICE_A, style="newscast-casual", rate="-6%", pitch="-1%")

def make_b_audio(text: str) -> str:
    clean = strip_markup(first_sentence(text))
    return tts_ssml_to_wav_with_fallback(clean, VOICE_B, style="empathetic", rate="-5%", pitch="-2%")

# ========== Output paths ==========
OUT_WAV   = "podcast_offline_version1.wav"
SCRIPT_TXT= "podcast_script.txt"
SHOW_NOTES= "podcast_shownotes.md"
TRANS_JSON= "podcast_transcript.jsonl"
TITLE     = "Ops Signals — Two-Minute Data Debate"

# ========== Main ==========
async def run_podcast():
    # 0) Ask which files to use
    choice = ask_file_choice()
    context, meta = load_context(choice)

    # 1) Prepare writers
    transcript = []
    t0 = datetime.datetime.now().isoformat()
    with open(TRANS_JSON, "w", encoding="utf-8") as _:
        pass  # truncate existing

    # 2) Build podcast
    with wave.open(OUT_WAV, "wb") as master_wf:
        master_wf.setnchannels(1); master_wf.setsampwidth(2); master_wf.setframerate(24000)
        elapsed = 0.0

        def log(role: str, text: str, tsec: float):
            entry = {"ts": datetime.datetime.now().isoformat(), "t": round(tsec,2), "role": role, "text": first_sentence(text)}
            transcript.append(f"{role}: {first_sentence(text)}")
            with open(TRANS_JSON, "a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\n")

        # Intro chime + super-short narration (one sentence)
        chime = synth_tone(0.30, 520, 0.22); append_wav_into_master(chime, master_wf); elapsed += get_wav_duration_seconds(chime); os.remove(chime)
        intro = "Welcome to Ops Signals, a sharp two-minute debate that turns your weekly aggregates and monthly KPIs into decisions."
        wi = make_a_audio(intro); append_wav_into_master(wi, master_wf); elapsed += get_wav_duration_seconds(wi); os.remove(wi)
        log("Narration", intro, elapsed)

        # Seed (not spoken)
        seed = f"Use these datasets as sole facts; debate cadence; one sentence per turn; cover weekly aggregates + ASA + Call Duration + Claim Time every time.\n{context[:14000]}"

        # Debate — strict round-robin A/B
        last = seed
        for turn in range(TURNS):
            if elapsed >= TARGET_SECONDS: break

            # A speaks (exactly one sentence)
            a_out = await llm(SYSTEM_A, last, max_tokens=60, temperature=0.45)
            wa = make_a_audio(a_out); append_wav_into_master(wa, master_wf); dur_a = get_wav_duration_seconds(wa); elapsed += dur_a; os.remove(wa)
            log("Agent A", a_out, elapsed)
            if elapsed >= TARGET_SECONDS: break

            # tiny separator
            seg = synth_tone(0.12, 660, 0.16); append_wav_into_master(seg, master_wf); elapsed += get_wav_duration_seconds(seg); os.remove(seg)

            # B responds (exactly one sentence)
            b_in = f"Agent A said: {first_sentence(a_out)}\nReference (do not read filenames):\n{context[:12000]}"
            b_out = await llm(SYSTEM_B, b_in, max_tokens=60, temperature=0.45)
            wb = make_b_audio(b_out); append_wav_into_master(wb, master_wf); dur_b = get_wav_duration_seconds(wb); elapsed += dur_b; os.remove(wb)
            log("Agent B", b_out, elapsed)

            last = b_out

            if elapsed >= TARGET_SECONDS: break

        # Outro if time remains (one sentence)
        if elapsed < TARGET_SECONDS - 0.8:
            close = "That’s today’s signal; upload more files if you want us to pressure-test root causes and simulate the impact of staffing or SLA changes."
            wc = make_b_audio(close); append_wav_into_master(wc, master_wf); elapsed += get_wav_duration_seconds(wc); os.remove(wc)
            log("Narration", close, elapsed)

        # Final chime
        out = synth_tone(0.28, 494, 0.20); append_wav_into_master(out, master_wf); elapsed += get_wav_duration_seconds(out); os.remove(out)

    # 3) Script + show notes
    with open(SCRIPT_TXT, "w", encoding="utf-8") as f:
        f.write("\n".join(transcript))

    total_sec = 0.0
    try:
        with wave.open(OUT_WAV, "rb") as r:
            total_sec = r.getnframes() / r.getframerate()
    except Exception:
        pass

    with open(SHOW_NOTES, "w", encoding="utf-8") as f:
        f.write(f"# {TITLE}\n")
        f.write(f"- **Recorded**: {t0}\n")
        f.write(f"- **Duration**: ~{int(total_sec)}s\n")
        f.write(f"- **Files used**: {', '.join(meta['files'])}\n")
        f.write("\n## Episode Structure\n- Intro\n- A/B debate (6 turns)\n- Close\n")
        f.write("\n## Guarantees\n- One sentence per turn\n- Every turn references: weekly aggregates + ASA + Call Duration + Claim Time\n- Senior tone; debate cadence\n")

    print(f"Saved: {OUT_WAV}, {SCRIPT_TXT}, {SHOW_NOTES}, {TRANS_JSON}")

if __name__ == "__main__":
    try:
        asyncio.run(run_podcast())
    except Exception as e:
        print(f"Error: {e}")
